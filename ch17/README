Go言語とコンテナ

- 仮想化
  ハードウェアとOSの間にもう一つOS(もしくはOSのようなもの)の層を差し込む
  -> 1台のハードウェア上に複数のOSやシステムを安全に共存させる
  -> ピークの異なる複数のサービスをまとめるなどして効率的にハードを使う
  =  仮想化
  ホストOS上にハードをシミュレーションする仮想化のためのソフトウェアを作成し、その上にゲストOSをインストールして使用
  仮想化のためのソフトウェア
    Oracle VirtualBox, Hyper-V, Parallels, VMWare, QEMU, Xen Server, etc...
    - エミュレーション: CPUを完全にエミュレーションすることで別のハードウェアのソフトウェアも使用できる
      パフォーマンスは大きく落ちるが、現代の高速なCPUを使用して旧世代のCPU向けに書かれたアプリを使える
    - ネイティブ仮想化: 同じアーキテクチャのCPUに限定されるものの、エミュレーションが不要で高速
  仮想化は低レイヤー技術の組み合わせ
    システムを仮想化するのに満たすべき必要条件＝PopekとGoldbergの仮想化要件
    https://ja.wikipedia.org/wiki/Popek%E3%81%A8Goldberg%E3%81%AE%E4%BB%AE%E6%83%B3%E5%8C%96%E8%A6%81%E4%BB%B6
    最近のIntel系CPUではユーザーモード(3)、特権モード(0)の他に、ハイパーバイザ用OSをのモード(-1)が追加されている
    -> それを使用することでゲストOSからホストOSへの処理の委譲が必要な操作を、効率よくフックできる仕組み
    = VT-x
    他にも、
      ゲストのメモリアドレスとホストのメモリアドレスを変換する拡張ページテーブル
      外部ハードウェアとのアクセスでホストOSを介さずに実行（PCIパスするー）出来るようにするVT-d
      ネットワーク仮想化のVT-c
    などなどの仮想化支援機構が実装されている
    ハイパーバイザ側では、Hyper-V(Windows), Hypervisor.framework(macOS), KVM(Linux)などOSが提供する支援機構を利用
  完全仮想化と準仮想化
    完全仮想化: ホストOSの上にゲストOSがあり、ゲストOSから他に影響を与えうる命令が実行されると、割り込みが発生してハイパーバイザがその処理を代行する
      = レイヤーを意識しなくて良い
    準仮想化: ハイパーバイザの上にメインOSとゲストOSが乗っていて、他に影響を与えうる命令の代わりにハイパーバイザが呼び出されている
      = ハイパーバイザの上で動作することを意識している
    完全仮想化のほうがパフォーマンスに難があったので、Amazon EC2は初期は準仮想化(PV)だった
    が、支援機構をCPUが提供することで高速化が施され、最近は完全仮想化(HVM)の方が優勢

- コンテナ
  仮想化は、使いたいサービスだけでなくOSも含めてまるごと動かすことが前提
  -> ゲストOSとホストOSが同じLinuxであればカーネルやシステムのデーモンが重複してロードされ無駄にメモリ消費
  -> OSのカーネルはホストのものをそのまま使うが、アプリケーションから見て自由に使えるOS環境が手に入ることに特化
  =  コンテナ
     アプリケーションが好き勝手しても全体が壊れないような、他のアプリに干渉しない・されない箱
  Linuxでは、コンテナを実現するOSカーネルの機能として、コントロールグループ(cgroups)および名前空間(Namespaces)がある
  -> 組み合わせでさまざまなOSのリソースを、仮想メモリを用意するように気軽に分割
  コントロールグループ(cgroups)
    CPU, メモリ, ブロックデバイス(mmap可能なストレージとほぼ同義), ネットワーク, /dev以下のファイル
    の使用量とアクセスを制限出来るカーネルの機能
  名前空間(Namespaces)
    プロセスID, ネットワーク(インタフェース, ルーティングテーブル, ソケットなど), マウント(ファイルシステム), UTS(ホスト名), IPC(セマフォ, MQ, 共有メモリなどのプロセス間通信), ユーザー(UID, GID)
    について、カーネルでは名前空間を分割できる
    -> 分離すると、親となるホストOSのリソースが、許可された一部しか見えなくなり、コンテナ内の要素だけが見えるようになる
       https://qiita.com/Surgo/items/709a07d68c6eafbad267
  コンテナと仮想化の関係
    仮想化はOSを起動する必要があり、起動には時間がかかる
    コンテナはプロセスを起動するように仮想環境を構築できる
    Docker
      Linuxではコンテナを利用
      Windows, macOSではOSが提供する仮想化の仕組みを使ってLinuxを動かし、その中でコンテナを利用

- libcontainerでコンテナを自作する
  Dockerのコアの部分(Go)
  [コード](./container)
  Linuxじゃないと動かないのでDocker使った
  `docker build -t build-container . --no-cache=true`
  `docker run --privileged -it build-container /bin/sh`