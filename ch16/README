時間と時刻

- OSのタイマー/カウンターの仕組み
  OSが起動する
  -> リアルタイムクロック(RTC: 現在の時刻を保持するハードウェア)から現在時刻を読み取る
  -> OSのシステムクロック(OSが保持する時間 ソフトウェア)をあわせる

- さまざまな時間
  リアルタイム時刻: コンピュータシステム内で最も正しい時間を表す(NTPのような時刻調整サービスで調整)
  モノトニック時刻: 巻き戻らない時刻(タイマー待ちで経過時間の測定などで使用)
  ウォールクロック時刻: 日常生活の実時間と同じ
  CPU時間: CPUが消費した時間

- 時間に関するシステムコール
  Goでは以下2つが関係
  - runtime.now()
    現在時刻を取得
    一番細かい粒度はナノ秒単位
    Windows: カーネルが仮想メモリ空間のSystemTimeという領域のカウンターを更新しているのでこれをみる
    Linux: clock_gettime()システムコールが利用できたらこれ、出来なかったらgettimeofday()システムコールにフォールバック
    macOS: RDTSCというCPUのアセンブリ命令を利用できるときはこれを使ってCPUのタイムスタンプカウンター、それ以外はgettimeofday()
  - runtime.semasleep()
    タイマー処理を使用したときに最終的に呼び出される関数
    マルチスレッドの共有資源の管理に使用されるセマフォという仕組みを利用
    Windows: WaitForSingleObject()というWin32 API
    Linux: futex()システムコール
    macOS: semaphore_timedwait_trap()

- Goで時刻を扱う
  time.Duration: 時間
  time.Time: 時刻
  数多くの演算がtime.Timeで定義されている
  time.After()
  time.Tick()

- 時刻のフォーマット
  数値を使ったテキストでのフォーマット
  time.RFC822
