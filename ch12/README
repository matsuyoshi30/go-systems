シグナルによるプロセス間の通信

シグナルの用途
- プロセス間通信: カーネルの仲介により、あるプロセスから別プロセスに対してシグナルを送信することが可能
- ソフトウェア割り込み: システムで発生したイベントはシグナルとしてプロセスに送られる

- シグナルのライフサイクル
  いろんなタイミングでいろんなエラーがCPUレベルで発生し、それを受けてカーネルがシグナルを生成する
  生成されたシグナルは対象のプロセスにsendされ、プロセスはシグナルを受け取ったら処理を止めてシグナルに対処する
  シグナルの種類に応じてプロセス側でシグナル処理を検討しておく

- シグナルの種類
  - ハンドル出来ないシグナル
    SIGKILL: プロセスを強制終了
    SIGSTOP: プロセスを一時停止してバックグラウンドジョブにする(fgコマンドでフォアグラウンドに戻せる)
  - サーバーアプリケーションでハンドルするシグナル
    SIGTERM: kill()システムコールやkillコマンドがデフォルトで送信するシグナルで、プロセスを終了させるもの
    SIGHUP: 設定ファイルの再読み込みを外部から指示するときに使用されるのがデファクト
  - コンソールアプリケーションでハンドルするシグナル
    SIGINT: Ctrl+C(ハンドル出来るSIGKILL)
    SIGQUIT: Ctrl+\(コアダンプ生成して終了)
    SIGTSTP: Ctrl+Z(ハンドル出来るSIGSTOP)
    SIGCONT: バックグラウンドから戻させる
    SIGWINCH: ウィンドウサイズの変更
    SIGHUP: 擬似端末から接続されるときに呼ばれる
  - その他たまに使うかもしれない
    SIGUSR1, SIGUSR2: ユーザー定義のシグナルで、アプリケーションが任意の用途で使用できる
    SIGPWR: 外部電源が切断され、無停電電源装置(UPS)が使用されたものの、バッテリー残量が低下してシステムを終了させる必要があるときにOSから送信されるシグナル

- Goにおけるシグナルの種類
  `syscall`パッケージ内で定義

- シグナルハンドラ
  注意
   - シグナルに関する設定はプロセス全体に及ぶグローバルなもの
   - シグナルはフォアグラウンドのプロセスに最初に送信される
   ->自作のコードでシグナルハンドラを書いてそれを`go run`で実行すると、シグナルはgoコマンドのプロセスに送信される
   ->`go build`で実行しましょう
  シグナルの受け取り: チャネルを作成してsignal.Notify()で任意のシグナルを登録
  シグナルの無視: signal.Ignore()
  シグナルのハンドラをデフォルトに戻す: signal.Reset()で任意のシグナル
  シグナルの送付を停止: signal.Stop()で任意のシグナルをこれ以上受け取らない
  他のプロセスにシグナルを送信: os.Process構造体を使う

- シグナルの応用例(Server::Starter)
  サーバーのプログラムは、複数のユーザーが同時にアクセスして利用できる
  -> バージョンアップや修正作業時の再起動や終了が難しいという問題がある
  =  グレイスフルリスタート
  -> kazuhoさんのServer::Starter
     新しいサーバーを起動して新しいリクエストはそこへ、古いサーバーのリクエストが完了したらそれは終了、という仕組み
     Perl: http://search.cpan.org/~kazuho/Server-Starter-0.33/lib/Server/Starter.pm
     Ruby: https://github.com/sonots/ruby-server-starter
     Go:   https://github.com/lestrrat-go/server-starter
  - Server::Starterの使い方
    - `start_server --port 8080 --pid-file app.pid -- ./server`でサーバー起動
      - ポート8080を開く
      - 現在のプロセスIDをapp.pidファイルに書き出す
      - 開いたポートを渡し、serverをstart_serverの子プロセスとして起動する
    - `kill -HUP `cat app.pid``で子プロセスを再起動
      - app.pidにはServer::StarterのプロセスIDが格納されている（起動時に指定）
      - SIGHUPを使用して再起動を依頼
      - SIGHUPを受け取ったServer::Starterは新しいプロセスを起動し、起動済みの子プロセスにはSIGTERMを送信する
      - SIGTERMを受け取る子プロセスのサーバーが「SIGTERMを受け取ったら新規のリクエスト受付を停止し、現在処理中のリクエストが完了するまで待って終了する」という実装であれば、ダウンタイムなしでサービスを更新できる
        [最低限の実装](./graceful-shutdowm)
        より詳細な内容は https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/

- Goのランタイムにおけるシグナルの内部実装
  マルチスレッドプログラミングでは、シグナルはその中のどれかのスレッドに届けられるので、シグナル処理用とそれ以外でスレッドを分けるのが一般的
  -> Goではruntime/signal_unix.goにある
     - minitSignalMask()でシグナルのマスクを設定し、すべてのシグナルをブロック
       - 各OSごとにアセンブリ言語で実装されているsigprocmask()からpthread_sigmask()を呼び出す
     - シグナル処理用スレッドのみでシグナルを許可しているのはensureSigM()
       GoではgoroutineとOSスレッドを付加状況に応じて柔軟に組み合わせるN:Mモデルを採用している
       この場合は特定のシグナルに限定するためgoroutineが必ず特定のOSスレッドで実行されるように保証するruntime.LockOSThread()を使用している
       signalパッケージのシグナル設定のための関数を呼ぶと、runtime.signal_enable()やruntime.signal_disable()が呼ばれる
         これらはensureSigM()が監視しているチャネルに更新情報を届ける
       ensureSigM()はsigprocmask()を呼び出して、signalパッケージがどのスレッドで実行されても問題なく、シグナル処理用のスレッドのシグナルについてマスクを更新する
     - シグナル受取先のハンドラを指定するのにはsigaction()システムコールが使用される
       runtime/signal_sighandler.goのsighandler()が呼ばれる
         runtime/sigqueue.goのsigsend()を呼び出し、共有のメモリ領域に受け取ったシグナル情報を書き出す
         signal_recv()を呼び出してシグナル情報を返す
         -> signalパッケージはこの関数を呼び出してNotify()で登録したチャネルにシグナル情報を伝達する