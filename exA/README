セキュリティ関連のOSの機能とssh

- 乱数
  Goの標準ライブラリ
    - math/rand
      擬似乱数生成器
      シードが同じなら生成される乱数も同じ＝シードがわかれば乱数がわかる
      => セキュリティに用いるのは厳禁
    - crypto/rand
      暗号用の乱数生成
      外乱要素を使って乱数を生成する
  乱数のシステムコール
    math/randはすべてユーザーモードで動作
    crypto/randはOSで提供される暗号論的疑似乱数生成器を利用
  乱数の使い方(./rand)

- TLS(Transport Layer Security)
  通信経路を暗号化して、盗聴や改ざん、再送信などを防ぐために使用されるプロトコル
  GoではOSをに登録された認証局はそのまま使用できる
  Linux: OpenSSLライブラリやそのクローンらのコアコンポーネントが使用する証明書をパースできるcrypto/x509
  Windows: CertGetCertificateChain()
  macOS: Security FrameworkのAPI

- ssh(Secure Shell)
  他のサーバーに安全な通信経路で接続して操作するときに利用されるプロトコル
  - sshの基本的な流れ
    DH鍵共有(Diffie-Hellman鍵共有)という仕組みがベース
    サーバーのなりすまし防止->公開鍵方式を使用したデジタル署名によるサーバー認証
    クライアントの認証->ホワイトリスト方式(もしくはIDとpasswordによるログイン)
  - Goによるssh接続[./ssh)
  - scp(Secure Copy)
    リモートサーバーとの間でファイルコピーをするプログラム
    サーバー側にもscpという同名のコマンドがあり、クライアントはサーバーにインストールされているscpコマンドを実行する
    クライアント側のscp: sshを使用してサーバーにログインし、サーバー側のscpコマンドを実行
    サーバー側のscp: クライアント側のscpコマンドを受け、クライアントが指定するファイルを標準出力を使用してクライアントに返す
    リモート->ローカル = ソースモード
    ローカル->リモート = シンクモード
    https://gist.github.com/jedy/3357393
    http://archive.is/WQUX5

- キーチェーン
  ユーザーIDやパスワード、クレジットカード情報などの情報を集中管理する仕組み
  macOS: Security FrameworkのKeychain Service
  Windows: 資格情報マネージャ
  Linuxカーネル: Key保存サービス
  etc..
  github.com/tmc/keyring
  [ウェブサービスに初めてアクセスするときはパスワードをユーザーに問い合わせ、2回目以降はそれを利用](./keychain)
