Go言語のメモリ管理

- メモリ確保の旅
  - 物理メモリと仮想メモリ
    プロセスは仮想的なメモリアドレス空間を使用してメモリにアクセスしている
    CPUに内蔵されているメモリ管理ユニット(MMU)
    ページテーブルというデータ構造で物理メモリのアドレスを管理
    -> プロセスはページテーブルを参照することで、物理的には1GBずつ4つの細切れになっているメモリを、仮想的に4GBのメモリであるように扱うことが出来る
    ページテーブルによる物理アドレスと仮想アドレスの変換
    = TLB(Translation Lookaside Buffer)というキャッシュで高速化
    メモリ節約のために1つの物理アドレスを複数の仮想アドレスが参照していることがある
    = 共有ライブラリなど数多くのプロセスが利用するものなど
    プロセスができると、隙間なくフラットなプロセス固有のメモリ空間がOSカーネルによって仮想メモリ空間に確保される
  - OSカーネルがプロセスのメモリを確保するまで
    プロセス起動 -> OSがプロセスごとに仮想メモリの領域を確保
    プロセスごとにページテーブルが用意されており、各プロセスで同じ仮想アドレスを見ていても物理アドレスは異なる
    OSが用意した仮想メモリ空間の中から、プロセスが「メモリこれだけください」とカーネルに依頼
    -> 空間の一部と物理メモリの対応付けが行われる(要求されたサイズのみを対応付け)
    ユーザーのメモリ空間
    = 若いアドレス番地からプログラム＋静的データ, ヒープ(カーネルから動的に貰うメモリ), 共有ライブラリ, スタックなど
    プロセス固有のメモリ空間には3つの連続したブロックに分けてプログラムが実際に利用するデータが格納される
  - 実行時の動的なメモリ確保: ヒープ
    OS内部のメモリ管理＝コスト大
    -> 大きめの塊でメモリをOSから分けてもらい、そのメモリの細かな管理はユーザーランドで行う
    =  プログラムにリンクされるランタイムの仕事
    動的に使用できるメモリ領域はヒープとスタックがある
    ヒープ
    - Cでいうmalloc
    - GoではTCMallocを採用
      - 32キロバイト以下のオブジェクトは、スレッドごとにメモリブロックを管理
        = ロックなどのスレッド競合によるパフォーマンス劣化を防ぐ
      - 32キロバイトより大きいオブジェクトは、4キロバイト単位に丸め、共有の領域(中央ページヒープ)で管理してメモリの無駄を減らす
      http://goog-perftools.sourceforge.net/doc/tcmalloc.html
      https://japan.googleblog.com/2009/05/google-4-performance-tools.html
  - 実行時の動的なメモリ管理: スタック
    関数呼び出し
    -> リターンアドレスや新しい関数のための作業メモリ領域(コンパイル時にサイズが分かるので固定量)として、スタックフレームというメモリブロックが確保される
    スタックフレームは、スレッドごとに予め確保されているメモリブロックに対して順番に追加したり削除したりするだけ
    = 割当コストはほぼほぼゼロ
    スレッドを新規に作成するとき、固定のメモリを確保する必要があるので、そのコストは上乗せされる
    -> OSによって初期値は違うがだいたい8MBくらい
    goroutineはOSスレッドと比較して極めて小さい4KBのスタックを確保する(=高速な起動)
    goroutine実行時に関数呼び出しで大きなサイズのスタックフレームが必要になった場合
    -> 別にスタックフレームを準備してそっちに引数をコピーして、あたかもスタックが初めて使用されたように関数呼び出しを行う
    -> スタックサイズがバカでかくても問題なく再帰ループが回せる
    https://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite
  - ユーザーコードでメモリを扱う
    C/C++ではポインタを使用せずにローカル変数として宣言するとスタックにメモリが確保され、newやmallocを使うとヒープにメモリが確保される
    Goではスタックかヒープかはコンパイラが判断する
    どっちで確保されているか知りたい場合はビルド時に`-gcflags -m`を付与
    https://golang.org/doc/faq#stack_or_heap

- Goの配列
  固定長配列

- Goのスライス
  可変長配列(裏には配列があり、そこを参照するウインドウ(対象の配列のスタート位置、終了位置、確保済みのサイズを持つ))
  以下の3つの数値とポインタを持った24バイト(64bit)のデータ
  - スライスの先頭の要素へのポインタ
  - スライスの長さ
  - スライスが確保している要素数
  appendで必要に応じて裏の配列のメモリを拡張してくれる
  既存の要素数が大きかったり、要素が構造体のようなサイズが大きいものだと、appendの実行にコストがかかる可能性あり
  -> 必要に応じて事前にmakeで大きなメモリを確保し、copyするなどでOSのシステムコールの回数を減らす工夫が必要

- ガベージコレクタ
  マークアンドスイープ方式
    メモリ領域をスキャンして必要なデータか否かを示すマークを付与
    -> 次のフェーズで不要なものを削除
  不要なメモリを削除する間にプログラムが止まる問題(ストップザ・ワールド)というネガティブな側面
  世代別にデータを管理してスキャンの回数を減らすことによってコストを抑える世代別GC
  必要なメモリにマークすると同時に隙間がないようにメモリを移動してメモリ領域の断片化を防ぎ、新しいメモリ確保時の計算量を減らすコピーGC
  -> これらはデータ移動が必要で多くのメモリが必要
  Goではインクリメンタルかつ並行にマークアンドスイープが行えるtri-color GCを採用
  https://deeeet.com/writing/2016/05/08/gogc-2016/
